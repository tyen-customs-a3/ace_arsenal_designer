// Generated by unRap v1.06 by Kegetys

class CfgVehicles {
	class Land;	// External class reference
	
	class LandVehicle : Land {
		class NewTurret;	// External class reference
		class ViewPilot;	// External class reference
		class Sounds;	// External class reference
	};
	
	class Car : LandVehicle {
		class HitPoints;	// External class reference
		class NewTurret;	// External class reference
	};
	
	class Car_F : Car {
		class Turrets {
			class MainTurret : NewTurret {
				disableSoundAttenuation = 1;
				class ViewOptics;	// External class reference
			};
		};
		
		class HitPoints {
			class HitLFWheel;	// External class reference
			class HitLBWheel;	// External class reference
			class HitLF2Wheel;	// External class reference
			class HitRFWheel;	// External class reference
			class HitRBWheel;	// External class reference
			class HitRF2Wheel;	// External class reference
			class HitBody;	// External class reference
			
			class HitGlass1 {};
			class HitGlass2;	// External class reference
		};
		class EventHandlers;	// External class reference
		class AnimationSources;	// External class reference
	};
	
	class sns_nekafBase : Car_F {
		model = "\sns_vehicles\m38a1\sns_nekaf.p3d";
		crewCrashProtection = 0.07;
		crewExplosionProtection = 0.1;
		crewVulnerable = false;
		explosionShielding = 0.7;
		hiddenSelections[] = {"Camo", "Camo2", "Camo3", "Camo4"};
		hiddenSelectionsTextures[]={"\sns_vehicles\m38a1\data\sns_nekaf_co.paa", "\sns_vehicles\m38a1\data\sns_nekaf_onder_co.paa", "\sns_vehicles\m38a1\data\sns_wielen_co.paa", "\sns_vehicles\m38a1\data\sns_canvas_co.paa"};
		Picture = "simc_uaf_67_preview\icons\sns_jeep_ca.paa";
		Icon = "simc_uaf_67_preview\icons\sns_jeep_ca.paa";
		mapSize = 4;
		side = TWest;
		faction = Simc_UA_65;
		crew = "simc_og107_mk1";
		typicalCargo[] = {"simc_og107_mk1", "simc_og107_mk1", "simc_og107_mk1"};
		namesound = "motorbike";
		unitInfoType = "RscUnitInfoTank";
		driverAction = "sns_nekafdriver";
		cargoAction[] = {"passenger_low01"};
		memoryPointsGetInGunner = "pos driver";
	    memoryPointsGetInGunnerDir = "pos driver dir";
		getInAction = "GetInQuadbike";
		getOutAction = "GetOutQuadbike";
		cargoGetInAction[] = {"GetInQuadbike_cargo"};
		cargoGetOutAction[] = {"GetOutQuadbike_cargo"};
		preciseGetInOut = 1;
		cargoPreciseGetInOut[] = {1};
		driverLeftHandAnimName = "drivewheel";
		driverRightHandAnimName = "drivewheel";
		selectionBackLights = "zadni_svetlo";
		selectionBrakeLights = "brzdove_svetlo";
		thrustDelay = 0.1;
		engineBrakeCoef = 0.1;
		overSpeedBrakeCoef = 0.8;
		brakeIdleSpeed = 1.78;
		maxSpeed = 80;	// TeTeT: was 280, max speed on level road, km/h
		fuelCapacity = 30;
		slingLoadCargoMemoryPoints[] = {"SlingLoadCargo1","SlingLoadCargo2","SlingLoadCargo3","SlingLoadCargo4"};
		canfloat = 0;
		WaterLeakiness = 50;

/**
 * TeTeT: commented old setting		
		wheelCircumference = 1.5;
		antiRollbarForceCoef = 0.3;
		antiRollbarForceLimit = 0.2;
		antiRollbarSpeedMin = 20;
		antiRollbarSpeedMax = 50;
		idleRpm = 600;
		redRpm = 2000;
		class complexGearbox {
			GearboxRatios[] = {"R1", -4.351, "N", 0, "D1", 2.081, "D2", 1.257, "D3", 0.737, "D4", 0.637, "D5", 0.575};
			TransmissionRatios[] = {"High", 4};
			gearBoxMode = "auto";
			moveOffGear = 1;
			driveString = "D";
			neutralString = "N";
			reverseString = "R";
		};
		engineStartSpeed = 2.5;
		simulation = "carx";
		terrainCoef = 5.8;
		dampersBumpCoef = 6;
		differentialType = "rear_limited";
		frontRearSplit = 0.1;
		frontBias = 0;
		rearBias = 1.5;
		centreBias = 1.3;
		clutchStrength = 50;
		enginePower = 25;
		maxOmega = 210;
		peakTorque = 230;
		dampingRateFullThrottle = 0.08;
		dampingRateZeroThrottleClutchEngaged = 0.35;
		dampingRateZeroThrottleClutchDisengaged = 0.35;
		torqueCurve[] = {{0, 0.6}, {0.2, 0.65}, {0.3, 0.8}, {0.7, 0.95}, {0.8, 1}, {0.9, 0.95}, {1, 0.5}};
		changeGearMinEffectivity[] = {0.95, 0.15, 0.98, 0.977, 0.974, 0.97, 0.95};
		switchTime = 0.1;
		latency = 1;
*/
		// physx begin - copied from Unsung Jeep
		simulation = "carx";
		wheelCircumference=2.834;
		antiRollbarForceCoef = 24;
		antiRollbarForceLimit = 30;
		antiRollbarSpeedMin = 15;
		antiRollbarSpeedMax = 70;
		damperSize = 0.2;
		damperForce = 1;
		damperDamping = 1;
		dampersBumpCoef = 6.0;
		differentialType = "all_limited";
		frontRearSplit = 0.5;
		frontBias = 1.3;
		rearBias = 1.3;
		centreBias = 1.3;
		clutchStrength = 10; // 35;
		idleRpm = 700;
		redRpm = 4000;
		enginePower = 276;
		maxOmega = 471;
		peakTorque = 400; // TeTeT: was 800; // 1253;
		dampingRateFullThrottle = 0.08;
		dampingRateZeroThrottleClutchEngaged = 2;
		dampingRateZeroThrottleClutchDisengaged = 0.1;

		// Physx engine and gears from Dodge copied
		torqueCurve[] = {
			{ 0.0,"0/500"},
			{ 0.2,"175/500"},
			{ 0.3,"300/500"},
			{ 0.4,"400/500"},
			{ 0.6,"450/500"},
			{ 0.7,"275/500"},
			{ 0.9,"125/500"},
			{ 1.0,"0/500"}
		};
		changeGearMinEffectivity[] = {0.500000, 0.150000, 0.970000, 0.970000, 0.970000, 0.970000, 0.970000, 0.985000};
		switchTime = 0.2; // 0.31;
		latency = 1.0;
		class complexGearbox
		{
			GearboxRatios[]=
			{
				"R1",
				-4,
				"N",
				0,
				"D1",
				"4.1",
				"D2",
				"2.21",
				"D3",
				"1.1",
				"D4",
				"0.47",
				"D5",
				"0.35",
				"D6",
				"0.15"
			};
			TransmissionRatios[] = {"High",7}; // Optional: defines transmission ratios (for example, High and Low range as commonly found in offroad vehicles)
			gearBoxMode		= "auto"; //gearbox can be of type: full-auto (only requires 'W' or 'S'), auto (requires shift between drive and reverse), semi-auto, manual
			moveOffGear		= 1; // defines what gear an automatic or semi-automatic gearbox will move off from stationary in. 1 by default.
			driveString		= "D"; // string to display in the HUD for forward gears.
			neutralString	  = "N"; // string to display in the HUD for neutral gear.
			reverseString	  = "R"; // string to display in the HUD for reverse gears.

		};

		class Wheels
		{
			class LF
			{
		
				boneName = "wheel_1_1_damper";
				steering = true;
				side = "left";
				center   = "wheel_1_1_axis";
				boundary = "wheel_1_1_bound";
				// TeTeT: old
				// mass = 50;
				// MOI = 20;
				mass = 50; 
				MOI = 15;
				dampingRate = 0.5;
				maxBrakeTorque = 2000;
				maxHandBrakeTorque = 0;
				suspTravelDirection[] = {0, -1, 0};
				suspForceAppPointOffset = "wheel_1_1_axis";
				tireForceAppPointOffset = "wheel_1_1_axis";
				maxCompression = 0.05;
				maxDroop = 0.05;
				// springs from Unsung
				sprungMass = 502;
				springStrength = 13000;
				springDamperRate = 10000;
				// sprungMass = 250.0;
				// springStrength = 6250;
				// springDamperRate = 1250;
				// longitudinalStiffnessPerUnitGravity = 100000;
				// latStiffX = 25;
				// latStiffY = 18000;
				frictionVsSlipGraph[] = {{0, 1}, {0.5, 1}, {1,1}};
			};
			class LR: LF
			{
				boneName = "wheel_1_2_damper";
				steering = false;
				center   = "wheel_1_2_axis";
				boundary = "wheel_1_2_bound";
				suspForceAppPointOffset = "wheel_1_2_axis";
				tireForceAppPointOffset = "wheel_1_2_axis";
				// maxHandBrakeTorque = 3000;
				// latStiffY = 180;	
				// sprungMass = 190.0;
				// springStrength = 4750;
				// springDamperRate = 1760;				
			};
			class RF: LF
			{
				boneName = "wheel_2_1_damper";
				center   = "wheel_2_1_axis";
				boundary = "wheel_2_1_bound";
				suspForceAppPointOffset = "wheel_2_1_axis";
				tireForceAppPointOffset = "wheel_2_1_axis";
				steering = true;
				side = "right";
			};
			class RR: RF
			{
				boneName = "wheel_2_2_damper";
				steering = false;
				center   = "wheel_2_2_axis";
				boundary = "wheel_2_2_bound";
				suspForceAppPointOffset = "wheel_2_2_axis";
				tireForceAppPointOffset = "wheel_2_2_axis";
				// maxHandBrakeTorque = 3000;
				// latStiffY = 180;				
				// sprungMass = 190.0;
				// springStrength = 4750;
				// springDamperRate = 1760;					
			};
		};
		
		class Exhausts {
			class Exhaust_left {
				position = "exhaust1_pos";
				direction = "exhaust1_dir";
				effect = "ExhaustsEffect";
			};
			
			class Exhaust_right {
				position = "exhaust2_pos";
				direction = "exhaust2_dir";
				effect = "ExhaustsEffect";
			};
		};
		weapons[] = {};
		magazines[] = {};
		armor = 50;
		cost = 1;
		transportsoldier = 1;
		transportMaxMagazines = 10;
		transportMaxWeapons = 1;
		driverForceOptics = false;
		hasDriver = true;
		driverIsCommander = true;
		hasGunner = false;
		viewGunnderInExternal = 1;
		ejectDeadDriver = true;
		ejectDeadCargo = true;
		ejectDeadGunner = true;
		fuelExplosionPower = 0;
		maximumLoad = 400;
		
		// threat (VSoft, VArmor, VAir), how threatening vehicle is to unit types
		threat[] = {1, 0.1, 0.4};

		
		class AnimationSources : AnimationSources {
			class scope_rotation {
				source = "user";
				animperiod = 2;
				angle0 = 0;
				angle1 = "rad -4.02";
			};
			
			class scope_translation {
				source = "user";
				animperiod = 2;
			};
			
			class ReloadAnim {
				source = "reload";
				weapon = "";
			};
			
			class ReloadMagazine {
				source = "reloadmagazine";
				weapon = "";
			};
			
			class muzzle_rot_HMG {
				source = "ammorandom";
				weapon = "";
			};
		};
		
		class GunParticles {
			class Effect {
				effectName = "MachineGunCloud";
				positionName = "zasleh";
				directionName = "zasleh";
			};
		};
		
		class HitPoints : HitPoints {
			class HitBody : HitBody {
				visual = "zbytek";
				name = "karoserie";
				minimalHit = 0.01;
				explosionShielding = 1;
				armor = 2;
				passThrough = false;
				radius = 0.15;
			};
			
			class HitLFWheel : HitLFWheel {
				armor = 0.25;
				material = -1;
				visual = "";
				passThrough = 0.3;
				name = "wheel_1_1_steering";
			};
			
			class HitLBWheel : HitLBWheel {
				armor = 0.25;
				material = -1;
				visual = "";
				passThrough = 0.3;
				name = "wheel_1_2_steering";
			};
			
			class HitRFWheel : HitRFWheel {
				armor = 0.25;
				material = -1;
				visual = "";
				passThrough = 0.3;
				name = "wheel_2_1_steering";
			};
			
			class HitRBWheel : HitRBWheel {
				armor = 0.25;
				material = -1;
				visual = "";
				passThrough = 0.3;
				name = "wheel_2_2_steering";
			};
			
			class HitEngine {
				armor = 0.7;
				material = -1;
				name = "motor";
				visual = "";
				passThrough = 0.2;
			};
			
			class HitFuel {
				armor = 0.7;
				material = -1;
				name = "palivo";
				visual = "";
				passThrough = 0.2;
			};
		};
		
		class Reflectors	/// only front lights are considered to be reflectors to save CPU
		{
			class LightCarHeadL01 	/// lights on each side consist of two bulbs with different flares
			{
				color[] 		= {1900, 1800, 1700};		/// approximate colour of standard lights
				ambient[]		= {5, 5, 5};				/// nearly a white one
				position 		= "LightCarHeadL01";		/// memory point for start of the light and flare
				direction 		= "LightCarHeadL01_end";	/// memory point for the light direction
				hitpoint 		= "Light_L";				/// point(s) in hitpoint lod for the light (hitPoints are created by engine)
				selection 		= "Light_L";				/// selection for artificial glow around the bulb, not much used any more
				size 			= 1;						/// size of the light point seen from distance
				innerAngle 		= 100;						/// angle of full light
				outerAngle 		= 179;						/// angle of some light
				coneFadeCoef 	= 10;						/// attenuation of light between the above angles
				intensity 		= 1;						/// strength of the light
				useFlare 		= true;						/// does the light use flare?
				dayLight 		= false;					/// switching light off during day saves CPU a lot
				flareSize 		= 1.0;						/// how big is the flare

				class Attenuation
				{
					start 			= 1.0;
					constant 		= 0;
					linear 			= 0;
					quadratic 		= 0.25;
					hardLimitStart 	= 30;		/// it is good to have some limit otherwise the light would shine to infinite distance
					hardLimitEnd 	= 60;		/// this allows adding more lights into scene
				};
			};

			class LightCarHeadL02: LightCarHeadL01
			{
				position 	= "LightCarHeadL02";
				direction 	= "LightCarHeadL02_end";
				FlareSize 	= 0.5;						/// side bulbs aren't that strong
			};

			class LightCarHeadR01: LightCarHeadL01
			{
				position 	= "LightCarHeadR01";
				direction 	= "LightCarHeadR01_end";
				hitpoint 	= "Light_R";
				selection 	= "Light_R";
			};

			class LightCarHeadR02: LightCarHeadR01
			{
				position 	= "LightCarHeadR02";
				direction 	= "LightCarHeadR02_end";
				FlareSize 	= 0.5;
			};
		};
		aggregateReflectors[] = {{"Left"}};
		class CargoTurret;	// External class reference
		
		class Turrets : Turrets {
			class CargoTurret_01 : CargoTurret {
				selectionFireAnim = "zasleh2";
				gunnerAction = "passenger_inside_2";
				memoryPointsGetInGunner = "pos cargo";
				memoryPointsGetInGunnerDir = "pos cargo dir";
				gunnerName = "Achterbank (Links)";
				gunnerCompartments = "Compartment1";
				proxyIndex = 2;
				maxElev = 35;
				minElev = -5;
				maxTurn = 75;
				minTurn = -75;
				isPersonTurret = 1;
				gunnerDoor = "";
				enabledByAnimationSource = "";
				ejectDeadCargo = true;
				ejectDeadGunner = true;
			};
					
			class CargoTurret_02 : CargoTurret_01 {
				selectionFireAnim = "zasle3";
				gunnerAction = "passenger_inside_2";
				gunnerName = "Achterbank (Rechts)";
				memoryPointsGetInGunner = "pos driver";
				memoryPointsGetInGunnerDir = "pos driver dir";
				maxElev = 35;
				minElev = -5;
				maxTurn = 75;
				minTurn = -75;
				proxyIndex = 3;
				gunnerDoor = "";
				ejectDeadCargo = true;
				ejectDeadGunner = true;		
			};
		};
		
		#include "sounds.hpp"
		
		#include "pip.hpp"
		
		class Damage /// damage changes material in specific places (visual in hitPoint)
		{
			tex[]={};
			mat[]=
			{
				"A3\data_f\glass_veh_int.rvmat", 		/// material mapped in model
				"A3\data_f\Glass_veh_damage.rvmat", 	/// changes to this one once damage of the part reaches 0.5
				"A3\data_f\Glass_veh_damage.rvmat",		/// changes to this one once damage of the part reaches 1

				"A3\data_f\glass_veh.rvmat",			/// another material
				"A3\data_f\Glass_veh_damage.rvmat",		/// changes into different ones
				"A3\data_f\Glass_veh_damage.rvmat"
			};
		};
		
		class AcreRacks {
            class Rack_1 {
                displayName = "Set Alpha";      // Name displayed in the interaction menu
                shortName = "A Set";                   // Short name displayed on the HUD. Maximum of 5 characters
                componentName = "ACRE_VRC64";        // Able to mount a PRC152
                 allowedPositions[] = {"driver", "commander", "gunner"}; // Who can configure the radio and open the radio GUI. Same wildcards as the intercom. It also allows transmitting/receiving
                disabledPositions[] = {};             // Who cannot access the radio (default: {})
                defaultComponents[] = {};             // Use this to attach simple components like Antennas, they will first attempt to fill empty connectors but will overide existing connectors. Not yet fully implemented. (default: {})
                mountedRadio = "ACRE_PRC77";                    // Predefined mounted radio (default: "", meaning none)
                isRadioRemovable = 1;                 // Radio can be removed (default: 0 = No)
               intercom[] = {"intercom_1"};                      // Radio not wired to any intercom. All units in intercom can receive/send transmittions (ACE3 interaction menu) but they cannot manipulate the radio (GUI interface) (default: {})
            };
            class Rack_2 {
                displayName = "Set Bravo";      // Name displayed in the interaction menu
                shortName = "B set";                  // Short name displayed on the HUD. Maximum of 5 characters
                componentName = "ACRE_VRC64";        // Rack type (able to mount a PRC77)
                allowedPositions[] = {"driver", "commander", "gunner"}; // Who can configure the radio and open the radio GUI. Same wildcards as the intercom. It also allows transmitting/receiving
                disabledPositions[] = {};
                defaultComponents[] = {};
                mountedRadio = "ACRE_PRC77";        // Predefined mounted radio
                isRadioRemovable = 1;                 // Radio cannot be removed
               intercom[] = {"intercom_2"};                      // Radio not wired to any intercom. All units in intercom can receive/send transmittions (ACE3 interaction menu) but they cannot manipulate the radio (GUI interface)
            };
        };
	};
	
	class sns_nekaf_1: sns_nekafBase {
		scope = public;
		displayName = "[NLD] M38a1 Nekaf";
		hiddenSelections[] = {"Camo", "Camo2", "Camo3", "Camo4"};
		hiddenSelectionsTextures[]={"\sns_vehicles\m38a1\data\sns_nekaf_co.paa", "\sns_vehicles\m38a1\data\sns_nekaf_onder_co.paa", "\sns_vehicles\m38a1\data\sns_wielen_co.paa", "\sns_vehicles\m38a1\data\sns_canvas_co.paa"};
	};
	
	class sns_nekaf_2: sns_nekafBase {
		scope = public;
		model = "\sns_vehicles\m38a1\nekaf_roof\sns_nekaf_2.p3d";
		displayName = "[NLD] M38a1 Nekaf (Roof)";
		hiddenSelections[] = {"Camo", "Camo2", "Camo3", "Camo4"};
		hiddenSelectionsTextures[]={"\sns_vehicles\m38a1\data\sns_nekaf_co.paa", "\sns_vehicles\m38a1\data\sns_nekaf_onder_co.paa", "\sns_vehicles\m38a1\data\sns_wielen_co.paa", "\sns_vehicles\m38a1\data\sns_canvas_co.paa"};
	};
	
	class sns_m38a1: sns_nekafBase {
		scope = public;
		faction = Simc_UA_65;
		crew = "simc_og107_mk1";
		model = "\sns_vehicles\m38a1\us\sns_m38a1.p3d";
		displayName = "[US] M38a1 Willys";
		hiddenSelections[] = {"Camo", "Camo2", "Camo3", "Camo4"};
		hiddenSelectionsTextures[]={"\sns_vehicles\m38a1\data\sns_m38us_co.paa", "\sns_vehicles\m38a1\data\sns_nekaf_onder_co.paa", "\sns_vehicles\m38a1\data\sns_wielen_co.paa", "\sns_vehicles\m38a1\data\sns_canvas_co.paa"};
	};
	
	class sns_m38a1_2: sns_nekafBase {
		scope = public;
		model = "\sns_vehicles\m38a1\us_roof\sns_m38a1_2.p3d";
		displayName = "[US] M38a1 Willys (Roof)";
		hiddenSelections[] = {"Camo", "Camo2", "Camo3", "Camo4"};
		hiddenSelectionsTextures[]={"\sns_vehicles\m38a1\data\sns_m38us_co.paa", "\sns_vehicles\m38a1\data\sns_nekaf_onder_co.paa", "\sns_vehicles\m38a1\data\sns_wielen_co.paa", "\sns_vehicles\m38a1\data\sns_canvas_co.paa"};
	};
};
